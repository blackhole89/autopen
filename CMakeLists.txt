# -*- CMakeLists.txt generated by CodeLite IDE. Do not edit by hand -*-

cmake_minimum_required(VERSION 2.8.11)

# Project name
project(autopen)

# This setting is useful for providing JSON file used by CodeLite for code completion
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

set(CONFIGURATION_NAME "Debug")

set(CL_WORKSPACE_DIRECTORY .)
# Set default locations
set(CL_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/${CL_WORKSPACE_DIRECTORY}/cmake-build-${CONFIGURATION_NAME}/output)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})

# Projects


# Top project
# Define some variables
set(PROJECT_autopen_PATH "${CMAKE_CURRENT_LIST_DIR}")
set(WORKSPACE_PATH "${CMAKE_CURRENT_LIST_DIR}/")



#{{{{ User Code 1
# Place your code here
#}}}}

include_directories(
    .
    .
    llama.cpp/
    llama.cpp/common/
    imgui/
    imgui/backends/

)


# Compiler options
execute_process(COMMAND 
    pkg-config --cflags gtkmm-3.0
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP ${CL_TMP_VAR} CL_VAR_1)
execute_process(COMMAND 
    pkg-config --cflags gtksourceviewmm-3.0
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP ${CL_TMP_VAR} CL_VAR_2)
execute_process(COMMAND 
    pkg-config --cflags jsoncpp
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP ${CL_TMP_VAR} CL_VAR_3)
execute_process(COMMAND 
    pkg-config --cflags fontconfig
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP ${CL_TMP_VAR} CL_VAR_4)
execute_process(COMMAND 
    pkg-config --cflags sdl2
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP ${CL_TMP_VAR} CL_VAR_5)
add_definitions(${CL_VAR_1})
add_definitions(${CL_VAR_2})
add_definitions(${CL_VAR_3})
add_definitions(${CL_VAR_4})
add_definitions(${CL_VAR_5})
add_definitions(-std=c++17)
add_definitions(-g)
add_definitions(-Wall)
add_definitions(-Og)
add_definitions(
    -D_REENTRANT
)


# Linker options
execute_process(COMMAND 
    pkg-config --libs gtkmm-3.0
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP ${CL_TMP_VAR} CL_VAR_6)
execute_process(COMMAND 
    pkg-config --libs gtksourceviewmm-3.0
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP ${CL_TMP_VAR} CL_VAR_7)
execute_process(COMMAND 
    pkg-config --libs jsoncpp
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP ${CL_TMP_VAR} CL_VAR_8)
execute_process(COMMAND 
    pkg-config --libs sdl2
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP ${CL_TMP_VAR} CL_VAR_9)
set(LINK_OPTIONS ${CL_VAR_6})
set(LINK_OPTIONS ${LINK_OPTIONS} ${CL_VAR_7})
set(LINK_OPTIONS ${LINK_OPTIONS} ${CL_VAR_8})
set(LINK_OPTIONS ${LINK_OPTIONS} ${CL_VAR_9})


if(WIN32)
    # Resource options
endif(WIN32)

# Library path
link_directories(
    .
    llama.cpp/
    llama.cpp/common/
)

# Define the CXX sources
set ( CXX_SRCS
    ${CMAKE_CURRENT_LIST_DIR}/editor.cpp
    ${CMAKE_CURRENT_LIST_DIR}/imgui/backends/imgui_impl_opengl3.cpp
    ${CMAKE_CURRENT_LIST_DIR}/imgui/backends/imgui_impl_sdl2.cpp
    ${CMAKE_CURRENT_LIST_DIR}/tokentree.cpp
    ${CMAKE_CURRENT_LIST_DIR}/imgui/imgui_widgets.cpp
    ${CMAKE_CURRENT_LIST_DIR}/main.cpp
    ${CMAKE_CURRENT_LIST_DIR}/imgui/imgui_demo.cpp
    ${CMAKE_CURRENT_LIST_DIR}/imgui/imgui.cpp
    ${CMAKE_CURRENT_LIST_DIR}/imgui/imgui_draw.cpp
    ${CMAKE_CURRENT_LIST_DIR}/imgui/imgui_tables.cpp
)

set_source_files_properties(
    ${CXX_SRCS} PROPERTIES COMPILE_FLAGS 
    " -std=c++17 -pthread -pthread -g -Wall -Og")

if(WIN32)
    enable_language(RC)
    set(CMAKE_RC_COMPILE_OBJECT
        "<CMAKE_RC_COMPILER> ${RC_OPTIONS} -O coff -i <SOURCE> -o <OBJECT>")
endif(WIN32)



#{{{{ User Code 2
# Place your code here
#}}}}

add_executable(autopen ${RC_SRCS} ${CXX_SRCS} ${C_SRCS})
target_link_libraries(autopen ${LINK_OPTIONS})

target_link_libraries(autopen
    z
    fontconfig
    libllama.a
    libcommon.a
    vulkan
    gomp
    GL
)



#{{{{ User Code 3
# Place your code here
#}}}}

